<h2>Functional Component rendered</h2>

<p>HEEx allows invoking these function components directly in the template
  using an HTML-like notation.</p>
<p>The state of the component is hold in the parent component. For example, we display a counter and interact with it with buttons.</p>   
<DemoWeb.FuncComp.display_counter counter={@counter}  id="cc-2"/>
<button phx-click="inc">+1</button>
<button phx-click="dec">-1</button>
<button phx-click="reset">Reset</button>

<pre> DemoWeb.FuncComp.display_counter counter={@counter}  id="cc-2"</pre>

<br/>
   


<h2>Another functional component</h2>
<p>Switch on/off the light and register the time:</p>


<%= if @light_bulb_status=="off" do %>
   <button phx-click="on">On</button>
   <button phx-click="off" disabled>Off</button>
   <% end %>

<%= if @light_bulb_status=="on" do %>
   <button phx-click="on" disabled>On</button>
   <button phx-click="off">Off</button>
<% end %>
<br/>
<span> The light was <b><%= @light_bulb_status %></b> at <DemoWeb.FuncComp.display_clock now={@now}/></span>
<br>






<br>
<h2>Stateful Component: a form</h2>
<.live_component module={DemoWeb.Airports.AirportComponent} 
   id="ac1"
   airports={[]} 
   airport_code={nil}
   loading={false}
   matches={[]}
   searched_code={nil}
   />
<.live_component module={DemoWeb.Airports.AirportComponent} 
   id="ac2"
   airports={[]} 
   airport_code={nil}
   loading={false}
   matches={[]}
   searched_code={nil}
   />

<!--
<DemoWeb.Airports.AirportComponent.render 
   id="ac-1"
   airports={@airports} 
   airport_code={@airport_code}
   loading={@loading}
   matches={@matches}
/>
-->
<!--.airportform airports={@airports} airport_code={@airport_code} /-->

<br>
<h3>Timer</h3>
<DemoWeb.FuncComp.display_timer seconds={@seconds} time={@time}/>
<button phx-click="start_timer">Start</button>
<button phx-click="stop_timer">Stop</button>


